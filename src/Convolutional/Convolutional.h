/*******************************************************************************
 Copyright (c) 2015, Etienne Pierre-Doray, INRS
 All rights reserved.
 
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:
 
 * Redistributions of source code must retain the above copyright notice, this
 list of conditions and the following disclaimer.
 
 * Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation
 and/or other materials provided with the distribution.
 
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 Declaration of Convolutional class
 ******************************************************************************/

#ifndef CONVOLUTIONAL_H
#define CONVOLUTIONAL_H

#include "../Code.h"
#include "../Structure/Trellis.h"

namespace fec {
  
  /**
   *  This class represents a convolutional encode / decoder.
   *  It offers methods encode and to decode data given a Structure.
   *
   *  The structure of the parity bits generated by a ConvolutionalCode object is as follows
   *
   *    | parity1 | parity2 | ... | tail1 | tail2 ... |
   *
   *  where parityX is the output symbol sequence of the branch used at stage X
   *  in the trellis, tailX is are the output symbol sequence of the tail branch
   *  at stage X.
   *
   *  The structure of the extrinsic information
   *
   *    | msg | systTail |
   *
   *  where msg are the extrinsic msg L-values generated by the map decoder
   *  and systTail are the tail bit added to the message for trellis termination.
   */
  class Convolutional : public Code
  {
    friend class boost::serialization::access;
  public:
    
    /**
     *  Trellis termination types.
     *  This specifies the type of termination at the end of each bloc.
     */
    enum TerminationType {
      Tail, /**< The state is brought to zero by implicitly adding new msg bit */
      Truncation /**< The state is forced to zero by truncating the trellis */
    };
    
    class Structure;
    class EncoderOptions {
      friend class Structure;
    public:
      EncoderOptions(Trellis trellis, size_t length) {trellis_ = trellis; length_ = length;}
      EncoderOptions& termination(TerminationType type) {terminationType_ = type; return *this;}
      
    private:
      Trellis trellis_;
      size_t length_;
      TerminationType terminationType_ = Truncation;
    };
    class DecoderOptions {
      friend class Structure;
    public:
      DecoderOptions() = default;
      
      DecoderOptions& decoderType(Code::DecoderType type) {decoderType_ = type; return *this;}
      DecoderOptions& metricType(Code::MetricType type) {metricType_ = type; return *this;}
      
    private:
      Code::DecoderType decoderType_ = Approximate;
      Code::MetricType metricType_ = Floating;
    };
    /**
     *  This class represents a convolutional code structure.
     *  It provides a usefull interface to store and acces the structure information.
     */
    class Structure : public Code::Structure {
      friend class ::boost::serialization::access;
    public:
      Structure() = default;
      Structure(const EncoderOptions& encoder, const DecoderOptions& decoder);
      Structure(const EncoderOptions& encoder);
      virtual ~Structure() = default;
      
      virtual const char * get_key() const;
      virtual Code::Structure::Type type() const {return Code::Structure::Convolutional;}
      
      inline size_t length() const {return length_;}
      inline size_t tailSize() const {return tailSize_;}
      inline size_t msgTailSize() const {return tailSize_ * trellis().inputSize();}
      inline TerminationType terminationType() const {return terminationType_;}
      inline const Trellis& trellis() const {return trellis_;}
      
      void setDecoderOptions(const DecoderOptions& decoder);
      void setEncoderOptions(const EncoderOptions& encoder);
      DecoderOptions getDecoderOptions();
      
      virtual bool check(std::vector<BitField<uint8_t>>::const_iterator parity) const;
      virtual void encode(std::vector<BitField<bool>>::const_iterator msg, std::vector<BitField<uint8_t>>::iterator parity) const;
      void encode(std::vector<BitField<bool>>::const_iterator msg, std::vector<BitField<uint8_t>>::iterator parity, std::vector<BitField<uint8_t>>::iterator tail) const;
      
    private:
      template <typename Archive>
      void serialize(Archive & ar, const unsigned int version) {
        using namespace boost::serialization;
        ar & ::BOOST_SERIALIZATION_BASE_OBJECT_NVP(Code::Structure);
        ar & ::BOOST_SERIALIZATION_NVP(trellis_);
        ar & ::BOOST_SERIALIZATION_NVP(terminationType_);
        ar & ::BOOST_SERIALIZATION_NVP(tailSize_);
        ar & ::BOOST_SERIALIZATION_NVP(length_);
      }
      
      Trellis trellis_;
      size_t length_;
      TerminationType terminationType_;
      size_t tailSize_;
    };
    
    Convolutional() = default;
    Convolutional(const Structure& structure, int workGroupSize = 4);
    Convolutional(const EncoderOptions& encoder, const DecoderOptions& decoder, int workGroupSize = 8);
    Convolutional(const EncoderOptions& encoder, int workGroupSize = 8);
    Convolutional(const Convolutional& other) : Code(&structure_) {*this = other;}
    virtual ~Convolutional() = default;
    
    virtual const char * get_key() const;
    
    inline const Structure& structure() const {return structure_;}
    
  protected:
    virtual void decodeBlocks(std::vector<LlrType>::const_iterator parity, std::vector<BitField<bool>>::iterator msg, size_t n) const;
    virtual void soDecodeBlocks(InputIterator input, OutputIterator output, size_t n) const;
    
  private:
    template <typename Archive>
    void serialize(Archive & ar, const unsigned int version) {
      using namespace boost::serialization;
      ar & ::BOOST_SERIALIZATION_NVP(structure_);
      ar & ::BOOST_SERIALIZATION_BASE_OBJECT_NVP(Code);
    }
    
    Structure structure_;
  };
  
}

BOOST_CLASS_TYPE_INFO(fec::Convolutional,extended_type_info_no_rtti<fec::Convolutional>);
BOOST_CLASS_EXPORT_KEY(fec::Convolutional);
BOOST_CLASS_TYPE_INFO(fec::Convolutional::Structure,extended_type_info_no_rtti<fec::Convolutional::Structure>);
BOOST_CLASS_EXPORT_KEY(fec::Convolutional::Structure);

#endif
