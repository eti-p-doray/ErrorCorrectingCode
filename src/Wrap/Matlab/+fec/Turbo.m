
%>  This class represents a turbo encode / decoder.
%>  It offers methods to encode and to decode data given a Turbo::Structure.
%>
%>  The structure of the parity bits generated by a Turbo object is as follow
%>
%>    | syst | systTail | convOutput1 | tailOutpu1 | convOutput2 | tailOutpu2 | ... |
%>
%>  where syst are the systematic bits, systTail are the tail bit
%>  added to the msg for termination of the constituents 1, 2, ..., respectively,
%>  convOutputX and tailOutputX are the output parity of the  msg and the tail
%>  generated by the constituent convolutional code X.
%>
%>  The structure of the extrinsic information
%>
%>    | msg1 | systTail1 | msg2 | systTail2 | ... |
%>
%>  where msgX are the extrinsic msg L-values generated by the constituent code X
%>  and systTailX are the tail bit added to the msg
%>  for termination of the constituent X.
classdef Turbo < fec.Codec
    properties (Dependent = true, Hidden)
        encoderOptions
        decoderOptions
    end
    properties (Dependent = true)
        iterations;
        algorithm;
        scheduling;
    end
    
    methods (Static)
        function self = loadobj(s)
            self = fec.Turbo();
            self.reload(s);
        end
    end

    methods
        %>  Turbo constructor.
        %>  codec = fec.Turbo(trellis, interleavers, Name, Value) creates a Turbo object from a Trellis and interleaver indices. Optionally, additional properties can be specified using Name (string inside single quotes) followed by its Value.
        %>
        %> codec = fec.Turbo(encoderOptions, decoderOptions) creates a Turbo object from the Turbo::EncoderOptions and the Turbo::DecoderOptions structures, cell array or object containing encoder and decoder properties which describes the codec.
        %>
        %>  See example.
        %>  @snippet TurboSimple.m  Creating a simple Turbo Codec
        function self = Turbo(varargin)
            if (nargin > 0)
              self.structure = fec.Turbo.Structure(varargin{:});
              self.wrapHandle_ = fec.bin.wrap(uint32(fec.WrapFcnId.Turbo_constructor), self.structure.getEncoderOptions, self.structure.getDecoderOptions);
            end
        end
        function perms = createPermutation(self, varargin)
            if (nargin < 2)
                varargin = {[]};
            end
            options = fec.Turbo.PunctureOptions(varargin{:});
            perms = fec.Permutation(fec.bin.wrap(uint32(fec.WrapFcnId.Turbo_createPermutation), self, options.get()), self.paritySize);
        end
        function val = get.iterations(self)
            val = self.decoderOptions.iterations;
        end
        function val = get.algorithm(self)
            val = fec.Codec.DecoderAlgorithm(self.decoderOptions.algorithm).char;
        end
        function val = get.scheduling(self)
            val = fec.Turbo.Scheduling(self.decoderOptions.scheduling).char;
        end
        function set.iterations(self, val)
            self.setDecoderOptions('iterations', val);
        end
        function set.algorithm(self, val)
            self.setDecoderOptions('algorithm', val);
        end
        function set.scheduling(self, val)
            self.setDecoderOptions('scheduling', val);
        end
        function val = get.decoderOptions(self)
            val = self.structure.decoderOptions;
        end
        function val = get.encoderOptions(self)
            val = self.structure.encoderOptions;
        end
        function set.decoderOptions(self,val)
            self.structure.decoderOptions = fec.Turbo.DecoderOptions(val);
            fec.bin.wrap(uint32(fec.WrapFcnId.Turbo_set_decoderOptions), self, self.structure.decoderOptions.get());
        end
        function set.encoderOptions(self,val)
            self.structure.encoderOptions = fec.Turbo.EncoderOptions(val);
            fec.bin.wrap(uint32(fec.WrapFcnId.Turbo_set_encoderOptions), self, self.structure.encoderOptions.get());
        end
        function setDecoderOptions(self,varargin)
            decoderOptions = self.decoderOptions;
            decoderOptions.set(varargin{:});
            self.decoderOptions = decoderOptions;
        end
        function setEncoderOptions(self,varargin)
            encoderOptions = self.encoderOptions;
            encoderOptions.set(varargin{:});
            self.encoderOptions = encoderOptions;
        end
    end

end