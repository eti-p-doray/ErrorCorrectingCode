/*******************************************************************************
 Copyright (c) 2015, Etienne Pierre-Doray, INRS
 All rights reserved.
 
 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:
 
 * Redistributions of source code must retain the above copyright notice, this
 list of conditions and the following disclaimer.
 
 * Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation
 and/or other materials provided with the distribution.
 
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 Declaration of ConvolutionalCode class
 ******************************************************************************/

#ifndef CONVOLUTIONAL_CODE_H
#define CONVOLUTIONAL_CODE_H

#include "../Code.h"
#include "ConvolutionalStructure.h"
#include "MapDecoder/MapStructure.h"
#include "ViterbiDecoder/ViterbiStructure.h"

namespace fec {

/**
 *  This class represents a convolutional encode / decoder.
 *  It offers methods encode and to decode data given a Structure.
 *
 *  The structure of the parity bits generated by a ConvolutionalCode object is as follows
 *
 *    | parity1 | parity2 | ... | tail1 | tail2 ... |
 *
 *  where parityX is the output symbol sequence of the branch used at stage X
 *  in the trellis, tailX is are the output symbol sequence of the tail branch
 *  at stage X.
 *
 *  The structure of the extrinsic information
 *
 *    | msg | systTail |
 *
 *  where msg are the extrinsic msg L-values generated by the map decoder
 *  and systTail are the tail bit added to the message for trellis termination.
 */
class ConvolutionalCode : public Code
{
  friend class TurboCode;
  friend class boost::serialization::access;
public:
  
  /**
   *  Trellis termination types.
   *  This specifies the type of termination at the end of each bloc.
   */
  enum TerminationType {
    Tail, /**< The state is brought to zero by implicitly adding new msg bit */
    Truncation /**< The state is forced to zero by truncating the trellis */
  };
  
  /**
   *  This class represents a convolutional code structure.
   *  It provides a usefull interface to store and acces the structure information.
   */
  Structure : public Code::Structure {
    friend class ::boost::serialization::access;
  public:
    
    Structure() = default;
    Structure(Trellis trellis, size_t blocSize, TerminationType terminationType = Truncation);
    virtual ~Structure() = default;
    
    virtual const char * get_key() const;
    
    virtual Code::Structure::Type type() const {return Code::Structure::Convolutional;}
    
    inline size_t blocSize() const {return blocSize_;}
    inline size_t tailSize() const {return tailSize_;}
    inline size_t msgTailSize() const {return tailSize_ * trellis().inputSize();}
    inline TerminationType terminationType() const {return terminationType_;}
    inline const Trellis& trellis() const {return trellis_;}
    
    BitField<uint64_t> encode(std::vector<uint8_t>::const_iterator msg, std::vector<uint8_t>::iterator parity) const;
    
  private:
    template <typename Archive>
    void serialize(Archive & ar, const unsigned int version) {
      using namespace boost::serialization;
      ar & ::BOOST_SERIALIZATION_BASE_OBJECT_NVP(Code::Structure);
      ar & ::BOOST_SERIALIZATION_NVP(trellis_);
      ar & ::BOOST_SERIALIZATION_NVP(terminationType_);
      ar & ::BOOST_SERIALIZATION_NVP(tailSize_);
      ar & ::BOOST_SERIALIZATION_NVP(blocSize_);
    }
    
    Trellis trellis_;
    TerminationType terminationType_;
    size_t tailSize_;
    size_t blocSize_;
  };
  
  class Decoder {
    friend class ::boost::serialization::access;
  public:
    Decoder(DecoderType type);
    
    LlrType threshold() const {return 100.0;}
    LlrType max() const {return std::numeric_limits<LlrType>::infinity();}
    
  private:
    template <typename Archive>
    void serialize(Archive & ar, const unsigned int version) {
      using namespace boost::serialization;
      ar & ::BOOST_SERIALIZATION_BASE_OBJECT_NVP(Code::Decoder);
    }
  };
  
  ConvolutionalCode() = default;
  ConvolutionalCode(const Structure& structure, const Decoder& decoder, int workGroupdSize = 4);
  virtual ~ConvolutionalCode() = default;
  
  virtual const char * get_key() const;
  
  inline const Structure& structure() const {return structure_;}
  inline Structure& structure() {return structure_;}
  
  MapDecoder::Structure& mapDecoder();
  const MapDecoder::Structure& mapDecoder() const;
  
  ViterbiDecoder::Structure& viterbiDecoder();
  const ViterbiDecoder::Structure& viterbiDecoder() const;
  
protected:
  virtual void encodeBloc(std::vector<uint8_t>::const_iterator messageIt, std::vector<uint8_t>::iterator parityIt) const;

  virtual void appDecodeNBloc(std::vector<LlrType>::const_iterator parityIn, std::vector<LlrType>::const_iterator extrinsicIn, std::vector<LlrType>::iterator messageOut, std::vector<LlrType>::iterator extrinsicOut, size_t n) const;
  virtual void softOutDecodeNBloc(std::vector<LlrType>::const_iterator parityIn, std::vector<LlrType>::iterator messageOut, size_t n) const;
  virtual void decodeNBloc(std::vector<LlrType>::const_iterator parityIn, std::vector<uint8_t>::iterator messageOut, size_t n) const;
  
private:
  template <typename Archive>
  void serialize(Archive & ar, const unsigned int version) {
    using namespace boost::serialization;
    ar & ::BOOST_SERIALIZATION_NVP(structure_);
    ar & ::BOOST_SERIALIZATION_BASE_OBJECT_NVP(Code);
    ar & ::BOOST_SERIALIZATION_NVP(mapStructure_);
    ar & ::BOOST_SERIALIZATION_NVP(viterbiStructure_);
  }
  
  Structure structure_;
  MapDecoder::Structure mapStructure_;
  ViterbiDecoder::Structure viterbiStructure_;
};
  
}

BOOST_CLASS_TYPE_INFO(fec::ConvolutionalCode::Structure,extended_type_info_no_rtti<fec::ConvolutionalCode::Structure>);
BOOST_CLASS_EXPORT_KEY(fec::ConvolutionalCode::Structure);
BOOST_CLASS_TYPE_INFO(fec::ConvolutionalCode::Structure,extended_type_info_no_rtti<fec::ConvolutionalCode::Structure>);
BOOST_CLASS_EXPORT_KEY(fec::ConvolutionalCode::Structure);

#endif
