function make
% Build all required mex files for MapCode
% This function should be called once before any attempt to use MapCode
% The directoty path is automatically found
%   
    cxxFlags = ['-std=c++11  -fno-common -fexceptions -fPIC -pthread'];
    %cxxFlags = ['-std=c++11'];
    
    iPath = {['-I' fullfile('../src/')], ['-I' fullfile('../libs/include/')]};
    lPath = {['-L' fullfile('../libs/')]};

    srcPath = '../src/';
    libsPath = '../libs/';
    trgPath = '';
    
    objDst = 'build';
    trgDst = '+bin';
    
    
    src = {...
        'Codec.cpp'; ...
        'Structure/Trellis.cpp'; ...
        'Convolutional/Convolutional.cpp'; ...
        'Convolutional/MapDecoder/MapDecoder.cpp'; ...
        'Convolutional/MapDecoder/MapDecoderImpl.cpp'; ...
        'Convolutional/ViterbiDecoder/ViterbiDecoder.cpp'; ...
        'Convolutional/ViterbiDecoder/ViterbiDecoderImpl.cpp'; ...
        'Turbo/Turbo.cpp'; ...
        'Turbo/TurboDecoder/TurboDecoder.cpp'; ...
        'Turbo/TurboDecoder/TurboDecoderImpl.cpp'; ...
        'Ldpc/Ldpc.cpp'; ...
        'Ldpc/BpDecoder/BpDecoder.cpp'; ...
        'Ldpc/BpDecoder/BpDecoderImpl.cpp'; ...
    };

    libs = {
        'serialization/src/archive_exception.cpp'; ...
        'serialization/src/basic_archive.cpp'; ...
        'serialization/src/basic_iarchive.cpp'; ...
        'serialization/src/basic_iserializer.cpp'; ...
        'serialization/src/basic_oarchive.cpp'; ...
        'serialization/src/basic_oserializer.cpp'; ...
        'serialization/src/basic_pointer_iserializer.cpp'; ...
        'serialization/src/basic_pointer_oserializer.cpp'; ...
        'serialization/src/basic_serializer_map.cpp'; ...
        'serialization/src/basic_text_iprimitive.cpp'; ...
        'serialization/src/basic_text_oprimitive.cpp'; ...
        'serialization/src/basic_xml_archive.cpp'; ...
        'serialization/src/binary_iarchive.cpp'; ...
        'serialization/src/binary_oarchive.cpp'; ...
        'serialization/src/codecvt_null.cpp'; ...
        'serialization/src/extended_type_info_no_rtti.cpp'; ...
        'serialization/src/extended_type_info_typeid.cpp'; ...
        'serialization/src/extended_type_info.cpp'; ...
        'serialization/src/polymorphic_iarchive.cpp'; ...
        'serialization/src/polymorphic_oarchive.cpp'; ...
        'serialization/src/stl_port.cpp'; ...
        'serialization/src/text_iarchive.cpp'; ...
        'serialization/src/text_oarchive.cpp'; ...
        'serialization/src/utf8_codecvt_facet.cpp'; ...
        'serialization/src/void_cast.cpp';...
        'serialization/src/xml_archive_exception.cpp'; ...
        'serialization/src/xml_iarchive.cpp'; ...
        'serialization/src/xml_oarchive.cpp'; ...
        'serialization/src/xml_grammar.cpp'; ...
        };
    
    trg = {...
        'wrap.cpp';...
        '@Codec/Codec_destroy.cpp';...
        '@Codec/Codec_save.cpp';...
        '@Codec/Codec_load.cpp';...
        '@Codec/Codec_encode.cpp';...
        '@Codec/Codec_decode.cpp';...
        '@Codec/Codec_soDecode.cpp';...
        '@Codec/Codec_get_msgSize.cpp';...
        '@Codec/Codec_get_systSize.cpp';...
        '@Codec/Codec_get_stateSize.cpp';...
        '@Codec/Codec_get_paritySize.cpp';...
        '@Codec/Codec_get_workGroupSize.cpp';...
        '@Codec/Codec_set_workGroupSize.cpp';...
        '@Turbo/Turbo_constructor.cpp';...
        '@Turbo/Turbo_get_decoderOptions.cpp';...
        '@Turbo/Turbo_set_encoderOptions.cpp';...
        '@Turbo/Turbo_set_decoderOptions.cpp';...
        '@Ldpc/Ldpc_constructor.cpp';...
        '@Ldpc/Ldpc_get_decoderOptions.cpp';...
        '@Ldpc/Ldpc_set_encoderOptions.cpp';...
        '@Ldpc/Ldpc_set_decoderOptions.cpp';...
        '@Convolutional/Convolutional_constructor.cpp';...
        '@Convolutional/Convolutional_get_decoderOptions.cpp';...
        '@Convolutional/Convolutional_set_encoderOptions.cpp';...
        '@Convolutional/Convolutional_set_decoderOptions.cpp';...
        };
    
    
    
    oldpath = cd(strrep(which(fullfile('+fec', 'make.m')), fullfile('make.m'), ''));
    mkdir(objDst);
    mkdir(trgDst);
    
     objs = '';
    for i = 1:length(src)
        [pathstr,name,ext] = fileparts(src{i});
        objInfo = dir(['build/' name '.*']);
        srcInfo = dir([srcPath src{i}]);
        if (isempty(objInfo) || objInfo.datenum < srcInfo.datenum)
            mex('-v', ['CXXFLAGS=' cxxFlags], iPath{:}, '-largeArrayDims', '-DBOOST_ALL_NO_LIB','-outdir', objDst, '-c', [srcPath src{i}]);
        else
            disp('skip');
        end
        objInfo = dir(['build/' name '.*']);
        obj = fullfile('build', objInfo.name);
        objs{length(objs)+1} = obj;
    end
    for i = 1:length(libs)
        [pathstr,name,ext] = fileparts(libs{i});
        objInfo = dir(['build/' name '.*']);
        srcInfo = dir([libsPath libs{i}]);
        if (isempty(objInfo) || objInfo.datenum < srcInfo.datenum)
            mex('-v',['CXXFLAGS=' cxxFlags], iPath{:}, '-largeArrayDims','-DBOOST_ALL_NO_LIB', '-outdir', objDst, '-c', [libsPath libs{i}]);
        else
            disp('skip');
        end
        objInfo = dir(['build/' name '.*']);
        obj = fullfile('build', objInfo.name);
        objs{length(objs)+1} = obj;
    end

    for i = 1:length(trg)
        trg{i} = [trgPath trg{i}];
    end
    mex('-v',['CXXFLAGS=' cxxFlags], iPath{:},lPath{:}, '-DBOOST_ALL_NO_LIB', '-largeArrayDims', '-outdir', trgDst, trg{:}, objs{:});
    
    cd(oldpath)
end
    